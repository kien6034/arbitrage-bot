// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: whirlpool/whirlpool.proto

package whirlpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhirlpoolClient is the client API for Whirlpool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhirlpoolClient interface {
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*GetPairResponse, error)
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
}

type whirlpoolClient struct {
	cc grpc.ClientConnInterface
}

func NewWhirlpoolClient(cc grpc.ClientConnInterface) WhirlpoolClient {
	return &whirlpoolClient{cc}
}

func (c *whirlpoolClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/whirlpool.Whirlpool/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whirlpoolClient) GetPair(ctx context.Context, in *GetPairRequest, opts ...grpc.CallOption) (*GetPairResponse, error) {
	out := new(GetPairResponse)
	err := c.cc.Invoke(ctx, "/whirlpool.Whirlpool/GetPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whirlpoolClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, "/whirlpool.Whirlpool/GetPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhirlpoolServer is the server API for Whirlpool service.
// All implementations must embed UnimplementedWhirlpoolServer
// for forward compatibility
type WhirlpoolServer interface {
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetPair(context.Context, *GetPairRequest) (*GetPairResponse, error)
	GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	mustEmbedUnimplementedWhirlpoolServer()
}

// UnimplementedWhirlpoolServer must be embedded to have forward compatible implementations.
type UnimplementedWhirlpoolServer struct {
}

func (UnimplementedWhirlpoolServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedWhirlpoolServer) GetPair(context.Context, *GetPairRequest) (*GetPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPair not implemented")
}
func (UnimplementedWhirlpoolServer) GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedWhirlpoolServer) mustEmbedUnimplementedWhirlpoolServer() {}

// UnsafeWhirlpoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhirlpoolServer will
// result in compilation errors.
type UnsafeWhirlpoolServer interface {
	mustEmbedUnimplementedWhirlpoolServer()
}

func RegisterWhirlpoolServer(s grpc.ServiceRegistrar, srv WhirlpoolServer) {
	s.RegisterService(&Whirlpool_ServiceDesc, srv)
}

func _Whirlpool_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhirlpoolServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whirlpool.Whirlpool/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhirlpoolServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whirlpool_GetPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhirlpoolServer).GetPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whirlpool.Whirlpool/GetPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhirlpoolServer).GetPair(ctx, req.(*GetPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whirlpool_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhirlpoolServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whirlpool.Whirlpool/GetPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhirlpoolServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Whirlpool_ServiceDesc is the grpc.ServiceDesc for Whirlpool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whirlpool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whirlpool.Whirlpool",
	HandlerType: (*WhirlpoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _Whirlpool_GetPrice_Handler,
		},
		{
			MethodName: "GetPair",
			Handler:    _Whirlpool_GetPair_Handler,
		},
		{
			MethodName: "GetPool",
			Handler:    _Whirlpool_GetPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whirlpool/whirlpool.proto",
}
